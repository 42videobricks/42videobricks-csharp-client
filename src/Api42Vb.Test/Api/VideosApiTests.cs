/*
 * 42videobricks
 *
 * 42videobricks is a Video Platform As A Service (VPaaS)
 *
 * The version of the OpenAPI document: 1.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Api42Vb.Client;
using Api42Vb.Api;
// uncomment below to import models
//using Api42Vb.Model;

namespace Api42Vb.Test.Api
{
    /// <summary>
    ///  Class for testing VideosApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class VideosApiTests : IDisposable
    {
        private VideosApi instance;

        public VideosApiTests()
        {
            instance = new VideosApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of VideosApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' VideosApi
            //Assert.IsType<VideosApi>(instance);
        }

        /// <summary>
        /// Test AddAttachmentByVideoId
        /// </summary>
        [Fact]
        public void AddAttachmentByVideoIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string videoId = null;
            //string attachmentType = null;
            //string locale = null;
            //System.IO.Stream? file = null;
            //instance.AddAttachmentByVideoId(videoId, attachmentType, locale, file);
        }

        /// <summary>
        /// Test AddThumbnailByVideoId
        /// </summary>
        [Fact]
        public void AddThumbnailByVideoIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string videoId = null;
            //System.IO.Stream? file = null;
            //instance.AddThumbnailByVideoId(videoId, file);
        }

        /// <summary>
        /// Test AddVideo
        /// </summary>
        [Fact]
        public void AddVideoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //VideoProperties videoProperties = null;
            //var response = instance.AddVideo(videoProperties);
            //Assert.IsType<Video>(response);
        }

        /// <summary>
        /// Test DeleteAttachmentByVideoId
        /// </summary>
        [Fact]
        public void DeleteAttachmentByVideoIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string videoId = null;
            //string attachmentType = null;
            //string locale = null;
            //instance.DeleteAttachmentByVideoId(videoId, attachmentType, locale);
        }

        /// <summary>
        /// Test DeleteThumbnailByVideoId
        /// </summary>
        [Fact]
        public void DeleteThumbnailByVideoIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string videoId = null;
            //instance.DeleteThumbnailByVideoId(videoId);
        }

        /// <summary>
        /// Test DeleteVideoById
        /// </summary>
        [Fact]
        public void DeleteVideoByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string videoId = null;
            //instance.DeleteVideoById(videoId);
        }

        /// <summary>
        /// Test FinalizeMultipartUploadVideoById
        /// </summary>
        [Fact]
        public void FinalizeMultipartUploadVideoByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string videoId = null;
            //VideoMultipartUploadFinalize? videoMultipartUploadFinalize = null;
            //instance.FinalizeMultipartUploadVideoById(videoId, videoMultipartUploadFinalize);
        }

        /// <summary>
        /// Test FinalizeUploadVideoById
        /// </summary>
        [Fact]
        public void FinalizeUploadVideoByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string videoId = null;
            //instance.FinalizeUploadVideoById(videoId);
        }

        /// <summary>
        /// Test GetAttachmentByVideoId
        /// </summary>
        [Fact]
        public void GetAttachmentByVideoIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string videoId = null;
            //string attachmentType = null;
            //string locale = null;
            //instance.GetAttachmentByVideoId(videoId, attachmentType, locale);
        }

        /// <summary>
        /// Test GetAttachmentFileByVideoId
        /// </summary>
        [Fact]
        public void GetAttachmentFileByVideoIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string videoId = null;
            //string attachmentType = null;
            //string locale = null;
            //instance.GetAttachmentFileByVideoId(videoId, attachmentType, locale);
        }

        /// <summary>
        /// Test GetAttachmentsByVideoId
        /// </summary>
        [Fact]
        public void GetAttachmentsByVideoIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string videoId = null;
            //string? attachmentType = null;
            //string? locale = null;
            //int? limit = null;
            //int? offset = null;
            //var response = instance.GetAttachmentsByVideoId(videoId, attachmentType, locale, limit, offset);
            //Assert.IsType<VideoAttachmentList>(response);
        }

        /// <summary>
        /// Test GetVideoById
        /// </summary>
        [Fact]
        public void GetVideoByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string videoId = null;
            //bool? token = null;
            //var response = instance.GetVideoById(videoId, token);
            //Assert.IsType<Video>(response);
        }

        /// <summary>
        /// Test GetVideoStatusById
        /// </summary>
        [Fact]
        public void GetVideoStatusByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string videoId = null;
            //var response = instance.GetVideoStatusById(videoId);
            //Assert.IsType<VideoStatus>(response);
        }

        /// <summary>
        /// Test GetVideos
        /// </summary>
        [Fact]
        public void GetVideosTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //int? offset = null;
            //string? search = null;
            //string? sort = null;
            //var response = instance.GetVideos(limit, offset, search, sort);
            //Assert.IsType<VideoList>(response);
        }

        /// <summary>
        /// Test InitMultipartUploadVideoById
        /// </summary>
        [Fact]
        public void InitMultipartUploadVideoByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string videoId = null;
            //VideoMultipartUploadInit? videoMultipartUploadInit = null;
            //var response = instance.InitMultipartUploadVideoById(videoId, videoMultipartUploadInit);
            //Assert.IsType<VideoMultipartUploadInitResponse>(response);
        }

        /// <summary>
        /// Test InitUploadVideoById
        /// </summary>
        [Fact]
        public void InitUploadVideoByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string videoId = null;
            //var response = instance.InitUploadVideoById(videoId);
            //Assert.IsType<VideoUploadInitResponse>(response);
        }

        /// <summary>
        /// Test UpdateVideoById
        /// </summary>
        [Fact]
        public void UpdateVideoByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string videoId = null;
            //VideoProperties videoProperties = null;
            //instance.UpdateVideoById(videoId, videoProperties);
        }
    }
}
