/*
 * 42videobricks
 *
 * 42videobricks is a Video Platform As A Service (VPaaS)
 *
 * The version of the OpenAPI document: 1.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Api42Vb.Client;
using Api42Vb.Model;

namespace Api42Vb.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideosApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Upload an attachement
        /// </summary>
        /// <remarks>
        /// Upload an attachement file and attached it to a video Currently: - attachement file type is limited to \&quot;subtitle\&quot; and \&quot;caption\&quot; (close caption) - supported file types: SRT (text/plain), VTT (text/vtt)
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="file">The file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AddAttachmentByVideoId(string videoId, string attachmentType, string locale, System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0);

        /// <summary>
        /// Upload an attachement
        /// </summary>
        /// <remarks>
        /// Upload an attachement file and attached it to a video Currently: - attachement file type is limited to \&quot;subtitle\&quot; and \&quot;caption\&quot; (close caption) - supported file types: SRT (text/plain), VTT (text/vtt)
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="file">The file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddAttachmentByVideoIdWithHttpInfo(string videoId, string attachmentType, string locale, System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0);
        /// <summary>
        /// Upload a thumbnail
        /// </summary>
        /// <remarks>
        /// Upload an image file and set it as Thumbnail to the video
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="file">The file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AddThumbnailByVideoId(string videoId, System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0);

        /// <summary>
        /// Upload a thumbnail
        /// </summary>
        /// <remarks>
        /// Upload an image file and set it as Thumbnail to the video
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="file">The file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddThumbnailByVideoIdWithHttpInfo(string videoId, System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0);
        /// <summary>
        /// Add a new video
        /// </summary>
        /// <remarks>
        /// You can create a video object by using this endpoint.  Once the video is created you can then upload the video.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Video</returns>
        Video AddVideo(VideoProperties videoProperties, int operationIndex = 0);

        /// <summary>
        /// Add a new video
        /// </summary>
        /// <remarks>
        /// You can create a video object by using this endpoint.  Once the video is created you can then upload the video.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Video</returns>
        ApiResponse<Video> AddVideoWithHttpInfo(VideoProperties videoProperties, int operationIndex = 0);
        /// <summary>
        /// Delete an attachment
        /// </summary>
        /// <remarks>
        /// Delete an attachment (and the attached file)
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteAttachmentByVideoId(string videoId, string attachmentType, string locale, int operationIndex = 0);

        /// <summary>
        /// Delete an attachment
        /// </summary>
        /// <remarks>
        /// Delete an attachment (and the attached file)
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAttachmentByVideoIdWithHttpInfo(string videoId, string attachmentType, string locale, int operationIndex = 0);
        /// <summary>
        /// Delete a thumbnail
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteThumbnailByVideoId(string videoId, int operationIndex = 0);

        /// <summary>
        /// Delete a thumbnail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteThumbnailByVideoIdWithHttpInfo(string videoId, int operationIndex = 0);
        /// <summary>
        /// Delete a video
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteVideoById(string videoId, int operationIndex = 0);

        /// <summary>
        /// Delete a video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteVideoByIdWithHttpInfo(string videoId, int operationIndex = 0);
        /// <summary>
        /// Multipart upload finalization
        /// </summary>
        /// <remarks>
        /// Once video parts are uploaded, finalize the upload by requesting to transcode the file.  New video file is replacing previous video file.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="videoMultipartUploadFinalize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void FinalizeMultipartUploadVideoById(string videoId, VideoMultipartUploadFinalize? videoMultipartUploadFinalize = default(VideoMultipartUploadFinalize?), int operationIndex = 0);

        /// <summary>
        /// Multipart upload finalization
        /// </summary>
        /// <remarks>
        /// Once video parts are uploaded, finalize the upload by requesting to transcode the file.  New video file is replacing previous video file.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="videoMultipartUploadFinalize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FinalizeMultipartUploadVideoByIdWithHttpInfo(string videoId, VideoMultipartUploadFinalize? videoMultipartUploadFinalize = default(VideoMultipartUploadFinalize?), int operationIndex = 0);
        /// <summary>
        /// Single file upload finalization
        /// </summary>
        /// <remarks>
        /// Once video file is uploaded, finalize the upload by requesting to transcode the file. Finalize apply to the last signedurl provided by the upload initialization.  New video file is replacing previous video file.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void FinalizeUploadVideoById(string videoId, int operationIndex = 0);

        /// <summary>
        /// Single file upload finalization
        /// </summary>
        /// <remarks>
        /// Once video file is uploaded, finalize the upload by requesting to transcode the file. Finalize apply to the last signedurl provided by the upload initialization.  New video file is replacing previous video file.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FinalizeUploadVideoByIdWithHttpInfo(string videoId, int operationIndex = 0);
        /// <summary>
        /// Get the attachment
        /// </summary>
        /// <remarks>
        /// Get a video attachement object
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetAttachmentByVideoId(string videoId, string attachmentType, string locale, int operationIndex = 0);

        /// <summary>
        /// Get the attachment
        /// </summary>
        /// <remarks>
        /// Get a video attachement object
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAttachmentByVideoIdWithHttpInfo(string videoId, string attachmentType, string locale, int operationIndex = 0);
        /// <summary>
        /// Get attachement file
        /// </summary>
        /// <remarks>
        /// Get the attachement file Currently only text/plain files are handled.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetAttachmentFileByVideoId(string videoId, string attachmentType, string locale, int operationIndex = 0);

        /// <summary>
        /// Get attachement file
        /// </summary>
        /// <remarks>
        /// Get the attachement file Currently only text/plain files are handled.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetAttachmentFileByVideoIdWithHttpInfo(string videoId, string attachmentType, string locale, int operationIndex = 0);
        /// <summary>
        /// List of attachments
        /// </summary>
        /// <remarks>
        /// Return a list of attachments to a videos
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">The type of attachments (optional)</param>
        /// <param name="locale">The locale (optional)</param>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VideoAttachmentList</returns>
        VideoAttachmentList GetAttachmentsByVideoId(string videoId, string? attachmentType = default(string?), string? locale = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// List of attachments
        /// </summary>
        /// <remarks>
        /// Return a list of attachments to a videos
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">The type of attachments (optional)</param>
        /// <param name="locale">The locale (optional)</param>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VideoAttachmentList</returns>
        ApiResponse<VideoAttachmentList> GetAttachmentsByVideoIdWithHttpInfo(string videoId, string? attachmentType = default(string?), string? locale = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retun a single video
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="token">add a token to assets to alloaw access to private video (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Video</returns>
        Video GetVideoById(string videoId, bool? token = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retun a single video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="token">add a token to assets to alloaw access to private video (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Video</returns>
        ApiResponse<Video> GetVideoByIdWithHttpInfo(string videoId, bool? token = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retun the detailed status of the video
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VideoStatus</returns>
        VideoStatus GetVideoStatusById(string videoId, int operationIndex = 0);

        /// <summary>
        /// Retun the detailed status of the video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VideoStatus</returns>
        ApiResponse<VideoStatus> GetVideoStatusByIdWithHttpInfo(string videoId, int operationIndex = 0);
        /// <summary>
        /// List videos
        /// </summary>
        /// <remarks>
        /// Return the list of videos.  Return an empty list it there is no video to return.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="search">Keywords search in all indexed fields (optional)</param>
        /// <param name="sort">Sorting results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VideoList</returns>
        VideoList GetVideos(int? limit = default(int?), int? offset = default(int?), string? search = default(string?), string? sort = default(string?), int operationIndex = 0);

        /// <summary>
        /// List videos
        /// </summary>
        /// <remarks>
        /// Return the list of videos.  Return an empty list it there is no video to return.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="search">Keywords search in all indexed fields (optional)</param>
        /// <param name="sort">Sorting results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VideoList</returns>
        ApiResponse<VideoList> GetVideosWithHttpInfo(int? limit = default(int?), int? offset = default(int?), string? search = default(string?), string? sort = default(string?), int operationIndex = 0);
        /// <summary>
        /// Multipart upload intialization
        /// </summary>
        /// <remarks>
        /// Get signed urls to upload a big file split in multiparts Once the video is uploaded, do not forget to call the multipart upload finalize  New video file is replacing previous video file.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="videoMultipartUploadInit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VideoMultipartUploadInitResponse</returns>
        VideoMultipartUploadInitResponse InitMultipartUploadVideoById(string videoId, VideoMultipartUploadInit? videoMultipartUploadInit = default(VideoMultipartUploadInit?), int operationIndex = 0);

        /// <summary>
        /// Multipart upload intialization
        /// </summary>
        /// <remarks>
        /// Get signed urls to upload a big file split in multiparts Once the video is uploaded, do not forget to call the multipart upload finalize  New video file is replacing previous video file.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="videoMultipartUploadInit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VideoMultipartUploadInitResponse</returns>
        ApiResponse<VideoMultipartUploadInitResponse> InitMultipartUploadVideoByIdWithHttpInfo(string videoId, VideoMultipartUploadInit? videoMultipartUploadInit = default(VideoMultipartUploadInit?), int operationIndex = 0);
        /// <summary>
        /// Single file upload intialization
        /// </summary>
        /// <remarks>
        /// Get a single signed url to upload a file Once the video is uploaded, do not forget to call the single upload finalize  File formats currently supported: avi, mov, mp4, mpeg, mpg, mxf, ts. New video file is replacing previous video file.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VideoUploadInitResponse</returns>
        VideoUploadInitResponse InitUploadVideoById(string videoId, int operationIndex = 0);

        /// <summary>
        /// Single file upload intialization
        /// </summary>
        /// <remarks>
        /// Get a single signed url to upload a file Once the video is uploaded, do not forget to call the single upload finalize  File formats currently supported: avi, mov, mp4, mpeg, mpg, mxf, ts. New video file is replacing previous video file.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VideoUploadInitResponse</returns>
        ApiResponse<VideoUploadInitResponse> InitUploadVideoByIdWithHttpInfo(string videoId, int operationIndex = 0);
        /// <summary>
        /// Update an existing video
        /// </summary>
        /// <remarks>
        /// Update video properties  Only properties provided are updated.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="videoProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateVideoById(string videoId, VideoProperties videoProperties, int operationIndex = 0);

        /// <summary>
        /// Update an existing video
        /// </summary>
        /// <remarks>
        /// Update video properties  Only properties provided are updated.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="videoProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateVideoByIdWithHttpInfo(string videoId, VideoProperties videoProperties, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideosApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Upload an attachement
        /// </summary>
        /// <remarks>
        /// Upload an attachement file and attached it to a video Currently: - attachement file type is limited to \&quot;subtitle\&quot; and \&quot;caption\&quot; (close caption) - supported file types: SRT (text/plain), VTT (text/vtt)
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="file">The file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddAttachmentByVideoIdAsync(string videoId, string attachmentType, string locale, System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload an attachement
        /// </summary>
        /// <remarks>
        /// Upload an attachement file and attached it to a video Currently: - attachement file type is limited to \&quot;subtitle\&quot; and \&quot;caption\&quot; (close caption) - supported file types: SRT (text/plain), VTT (text/vtt)
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="file">The file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddAttachmentByVideoIdWithHttpInfoAsync(string videoId, string attachmentType, string locale, System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload a thumbnail
        /// </summary>
        /// <remarks>
        /// Upload an image file and set it as Thumbnail to the video
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="file">The file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddThumbnailByVideoIdAsync(string videoId, System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload a thumbnail
        /// </summary>
        /// <remarks>
        /// Upload an image file and set it as Thumbnail to the video
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="file">The file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddThumbnailByVideoIdWithHttpInfoAsync(string videoId, System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a new video
        /// </summary>
        /// <remarks>
        /// You can create a video object by using this endpoint.  Once the video is created you can then upload the video.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Video</returns>
        System.Threading.Tasks.Task<Video> AddVideoAsync(VideoProperties videoProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a new video
        /// </summary>
        /// <remarks>
        /// You can create a video object by using this endpoint.  Once the video is created you can then upload the video.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Video)</returns>
        System.Threading.Tasks.Task<ApiResponse<Video>> AddVideoWithHttpInfoAsync(VideoProperties videoProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an attachment
        /// </summary>
        /// <remarks>
        /// Delete an attachment (and the attached file)
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAttachmentByVideoIdAsync(string videoId, string attachmentType, string locale, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an attachment
        /// </summary>
        /// <remarks>
        /// Delete an attachment (and the attached file)
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAttachmentByVideoIdWithHttpInfoAsync(string videoId, string attachmentType, string locale, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a thumbnail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteThumbnailByVideoIdAsync(string videoId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a thumbnail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteThumbnailByVideoIdWithHttpInfoAsync(string videoId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteVideoByIdAsync(string videoId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVideoByIdWithHttpInfoAsync(string videoId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Multipart upload finalization
        /// </summary>
        /// <remarks>
        /// Once video parts are uploaded, finalize the upload by requesting to transcode the file.  New video file is replacing previous video file.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="videoMultipartUploadFinalize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FinalizeMultipartUploadVideoByIdAsync(string videoId, VideoMultipartUploadFinalize? videoMultipartUploadFinalize = default(VideoMultipartUploadFinalize?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Multipart upload finalization
        /// </summary>
        /// <remarks>
        /// Once video parts are uploaded, finalize the upload by requesting to transcode the file.  New video file is replacing previous video file.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="videoMultipartUploadFinalize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FinalizeMultipartUploadVideoByIdWithHttpInfoAsync(string videoId, VideoMultipartUploadFinalize? videoMultipartUploadFinalize = default(VideoMultipartUploadFinalize?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Single file upload finalization
        /// </summary>
        /// <remarks>
        /// Once video file is uploaded, finalize the upload by requesting to transcode the file. Finalize apply to the last signedurl provided by the upload initialization.  New video file is replacing previous video file.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FinalizeUploadVideoByIdAsync(string videoId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Single file upload finalization
        /// </summary>
        /// <remarks>
        /// Once video file is uploaded, finalize the upload by requesting to transcode the file. Finalize apply to the last signedurl provided by the upload initialization.  New video file is replacing previous video file.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FinalizeUploadVideoByIdWithHttpInfoAsync(string videoId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the attachment
        /// </summary>
        /// <remarks>
        /// Get a video attachement object
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAttachmentByVideoIdAsync(string videoId, string attachmentType, string locale, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the attachment
        /// </summary>
        /// <remarks>
        /// Get a video attachement object
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAttachmentByVideoIdWithHttpInfoAsync(string videoId, string attachmentType, string locale, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get attachement file
        /// </summary>
        /// <remarks>
        /// Get the attachement file Currently only text/plain files are handled.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetAttachmentFileByVideoIdAsync(string videoId, string attachmentType, string locale, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get attachement file
        /// </summary>
        /// <remarks>
        /// Get the attachement file Currently only text/plain files are handled.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAttachmentFileByVideoIdWithHttpInfoAsync(string videoId, string attachmentType, string locale, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of attachments
        /// </summary>
        /// <remarks>
        /// Return a list of attachments to a videos
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">The type of attachments (optional)</param>
        /// <param name="locale">The locale (optional)</param>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VideoAttachmentList</returns>
        System.Threading.Tasks.Task<VideoAttachmentList> GetAttachmentsByVideoIdAsync(string videoId, string? attachmentType = default(string?), string? locale = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of attachments
        /// </summary>
        /// <remarks>
        /// Return a list of attachments to a videos
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">The type of attachments (optional)</param>
        /// <param name="locale">The locale (optional)</param>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VideoAttachmentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VideoAttachmentList>> GetAttachmentsByVideoIdWithHttpInfoAsync(string videoId, string? attachmentType = default(string?), string? locale = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retun a single video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="token">add a token to assets to alloaw access to private video (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Video</returns>
        System.Threading.Tasks.Task<Video> GetVideoByIdAsync(string videoId, bool? token = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retun a single video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="token">add a token to assets to alloaw access to private video (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Video)</returns>
        System.Threading.Tasks.Task<ApiResponse<Video>> GetVideoByIdWithHttpInfoAsync(string videoId, bool? token = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retun the detailed status of the video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VideoStatus</returns>
        System.Threading.Tasks.Task<VideoStatus> GetVideoStatusByIdAsync(string videoId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retun the detailed status of the video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VideoStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<VideoStatus>> GetVideoStatusByIdWithHttpInfoAsync(string videoId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List videos
        /// </summary>
        /// <remarks>
        /// Return the list of videos.  Return an empty list it there is no video to return.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="search">Keywords search in all indexed fields (optional)</param>
        /// <param name="sort">Sorting results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VideoList</returns>
        System.Threading.Tasks.Task<VideoList> GetVideosAsync(int? limit = default(int?), int? offset = default(int?), string? search = default(string?), string? sort = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List videos
        /// </summary>
        /// <remarks>
        /// Return the list of videos.  Return an empty list it there is no video to return.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="search">Keywords search in all indexed fields (optional)</param>
        /// <param name="sort">Sorting results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VideoList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VideoList>> GetVideosWithHttpInfoAsync(int? limit = default(int?), int? offset = default(int?), string? search = default(string?), string? sort = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Multipart upload intialization
        /// </summary>
        /// <remarks>
        /// Get signed urls to upload a big file split in multiparts Once the video is uploaded, do not forget to call the multipart upload finalize  New video file is replacing previous video file.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="videoMultipartUploadInit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VideoMultipartUploadInitResponse</returns>
        System.Threading.Tasks.Task<VideoMultipartUploadInitResponse> InitMultipartUploadVideoByIdAsync(string videoId, VideoMultipartUploadInit? videoMultipartUploadInit = default(VideoMultipartUploadInit?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Multipart upload intialization
        /// </summary>
        /// <remarks>
        /// Get signed urls to upload a big file split in multiparts Once the video is uploaded, do not forget to call the multipart upload finalize  New video file is replacing previous video file.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="videoMultipartUploadInit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VideoMultipartUploadInitResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VideoMultipartUploadInitResponse>> InitMultipartUploadVideoByIdWithHttpInfoAsync(string videoId, VideoMultipartUploadInit? videoMultipartUploadInit = default(VideoMultipartUploadInit?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Single file upload intialization
        /// </summary>
        /// <remarks>
        /// Get a single signed url to upload a file Once the video is uploaded, do not forget to call the single upload finalize  File formats currently supported: avi, mov, mp4, mpeg, mpg, mxf, ts. New video file is replacing previous video file.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VideoUploadInitResponse</returns>
        System.Threading.Tasks.Task<VideoUploadInitResponse> InitUploadVideoByIdAsync(string videoId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Single file upload intialization
        /// </summary>
        /// <remarks>
        /// Get a single signed url to upload a file Once the video is uploaded, do not forget to call the single upload finalize  File formats currently supported: avi, mov, mp4, mpeg, mpg, mxf, ts. New video file is replacing previous video file.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VideoUploadInitResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VideoUploadInitResponse>> InitUploadVideoByIdWithHttpInfoAsync(string videoId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an existing video
        /// </summary>
        /// <remarks>
        /// Update video properties  Only properties provided are updated.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="videoProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateVideoByIdAsync(string videoId, VideoProperties videoProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an existing video
        /// </summary>
        /// <remarks>
        /// Update video properties  Only properties provided are updated.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="videoProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateVideoByIdWithHttpInfoAsync(string videoId, VideoProperties videoProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideosApi : IVideosApiSync, IVideosApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VideosApi : IVideosApi
    {
        private Api42Vb.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VideosApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VideosApi(string basePath)
        {
            this.Configuration = Api42Vb.Client.Configuration.MergeConfigurations(
                Api42Vb.Client.GlobalConfiguration.Instance,
                new Api42Vb.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Api42Vb.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Api42Vb.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Api42Vb.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VideosApi(Api42Vb.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Api42Vb.Client.Configuration.MergeConfigurations(
                Api42Vb.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Api42Vb.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Api42Vb.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Api42Vb.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideosApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public VideosApi(Api42Vb.Client.ISynchronousClient client, Api42Vb.Client.IAsynchronousClient asyncClient, Api42Vb.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Api42Vb.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Api42Vb.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Api42Vb.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Api42Vb.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Api42Vb.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Upload an attachement Upload an attachement file and attached it to a video Currently: - attachement file type is limited to \&quot;subtitle\&quot; and \&quot;caption\&quot; (close caption) - supported file types: SRT (text/plain), VTT (text/vtt)
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="file">The file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AddAttachmentByVideoId(string videoId, string attachmentType, string locale, System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0)
        {
            AddAttachmentByVideoIdWithHttpInfo(videoId, attachmentType, locale, file);
        }

        /// <summary>
        /// Upload an attachement Upload an attachement file and attached it to a video Currently: - attachement file type is limited to \&quot;subtitle\&quot; and \&quot;caption\&quot; (close caption) - supported file types: SRT (text/plain), VTT (text/vtt)
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="file">The file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Api42Vb.Client.ApiResponse<Object> AddAttachmentByVideoIdWithHttpInfo(string videoId, string attachmentType, string locale, System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->AddAttachmentByVideoId");
            }

            // verify the required parameter 'attachmentType' is set
            if (attachmentType == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'attachmentType' when calling VideosApi->AddAttachmentByVideoId");
            }

            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'locale' when calling VideosApi->AddAttachmentByVideoId");
            }

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentType", Api42Vb.Client.ClientUtils.ParameterToString(attachmentType)); // path parameter
            localVarRequestOptions.PathParameters.Add("locale", Api42Vb.Client.ClientUtils.ParameterToString(locale)); // path parameter
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "VideosApi.AddAttachmentByVideoId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/videos/{videoId}/attachments/{attachmentType}/{locale}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAttachmentByVideoId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload an attachement Upload an attachement file and attached it to a video Currently: - attachement file type is limited to \&quot;subtitle\&quot; and \&quot;caption\&quot; (close caption) - supported file types: SRT (text/plain), VTT (text/vtt)
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="file">The file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddAttachmentByVideoIdAsync(string videoId, string attachmentType, string locale, System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddAttachmentByVideoIdWithHttpInfoAsync(videoId, attachmentType, locale, file, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Upload an attachement Upload an attachement file and attached it to a video Currently: - attachement file type is limited to \&quot;subtitle\&quot; and \&quot;caption\&quot; (close caption) - supported file types: SRT (text/plain), VTT (text/vtt)
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="file">The file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<Object>> AddAttachmentByVideoIdWithHttpInfoAsync(string videoId, string attachmentType, string locale, System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->AddAttachmentByVideoId");
            }

            // verify the required parameter 'attachmentType' is set
            if (attachmentType == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'attachmentType' when calling VideosApi->AddAttachmentByVideoId");
            }

            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'locale' when calling VideosApi->AddAttachmentByVideoId");
            }


            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentType", Api42Vb.Client.ClientUtils.ParameterToString(attachmentType)); // path parameter
            localVarRequestOptions.PathParameters.Add("locale", Api42Vb.Client.ClientUtils.ParameterToString(locale)); // path parameter
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "VideosApi.AddAttachmentByVideoId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/videos/{videoId}/attachments/{attachmentType}/{locale}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAttachmentByVideoId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a thumbnail Upload an image file and set it as Thumbnail to the video
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="file">The file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AddThumbnailByVideoId(string videoId, System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0)
        {
            AddThumbnailByVideoIdWithHttpInfo(videoId, file);
        }

        /// <summary>
        /// Upload a thumbnail Upload an image file and set it as Thumbnail to the video
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="file">The file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Api42Vb.Client.ApiResponse<Object> AddThumbnailByVideoIdWithHttpInfo(string videoId, System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->AddThumbnailByVideoId");
            }

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "VideosApi.AddThumbnailByVideoId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/videos/{videoId}/thumbnail", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddThumbnailByVideoId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a thumbnail Upload an image file and set it as Thumbnail to the video
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="file">The file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddThumbnailByVideoIdAsync(string videoId, System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddThumbnailByVideoIdWithHttpInfoAsync(videoId, file, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Upload a thumbnail Upload an image file and set it as Thumbnail to the video
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="file">The file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<Object>> AddThumbnailByVideoIdWithHttpInfoAsync(string videoId, System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->AddThumbnailByVideoId");
            }


            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "VideosApi.AddThumbnailByVideoId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/videos/{videoId}/thumbnail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddThumbnailByVideoId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new video You can create a video object by using this endpoint.  Once the video is created you can then upload the video.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Video</returns>
        public Video AddVideo(VideoProperties videoProperties, int operationIndex = 0)
        {
            Api42Vb.Client.ApiResponse<Video> localVarResponse = AddVideoWithHttpInfo(videoProperties);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new video You can create a video object by using this endpoint.  Once the video is created you can then upload the video.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Video</returns>
        public Api42Vb.Client.ApiResponse<Video> AddVideoWithHttpInfo(VideoProperties videoProperties, int operationIndex = 0)
        {
            // verify the required parameter 'videoProperties' is set
            if (videoProperties == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoProperties' when calling VideosApi->AddVideo");
            }

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = videoProperties;

            localVarRequestOptions.Operation = "VideosApi.AddVideo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Video>("/videos", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVideo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new video You can create a video object by using this endpoint.  Once the video is created you can then upload the video.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Video</returns>
        public async System.Threading.Tasks.Task<Video> AddVideoAsync(VideoProperties videoProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Api42Vb.Client.ApiResponse<Video> localVarResponse = await AddVideoWithHttpInfoAsync(videoProperties, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new video You can create a video object by using this endpoint.  Once the video is created you can then upload the video.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Video)</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<Video>> AddVideoWithHttpInfoAsync(VideoProperties videoProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoProperties' is set
            if (videoProperties == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoProperties' when calling VideosApi->AddVideo");
            }


            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = videoProperties;

            localVarRequestOptions.Operation = "VideosApi.AddVideo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Video>("/videos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVideo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an attachment Delete an attachment (and the attached file)
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteAttachmentByVideoId(string videoId, string attachmentType, string locale, int operationIndex = 0)
        {
            DeleteAttachmentByVideoIdWithHttpInfo(videoId, attachmentType, locale);
        }

        /// <summary>
        /// Delete an attachment Delete an attachment (and the attached file)
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Api42Vb.Client.ApiResponse<Object> DeleteAttachmentByVideoIdWithHttpInfo(string videoId, string attachmentType, string locale, int operationIndex = 0)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->DeleteAttachmentByVideoId");
            }

            // verify the required parameter 'attachmentType' is set
            if (attachmentType == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'attachmentType' when calling VideosApi->DeleteAttachmentByVideoId");
            }

            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'locale' when calling VideosApi->DeleteAttachmentByVideoId");
            }

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentType", Api42Vb.Client.ClientUtils.ParameterToString(attachmentType)); // path parameter
            localVarRequestOptions.PathParameters.Add("locale", Api42Vb.Client.ClientUtils.ParameterToString(locale)); // path parameter

            localVarRequestOptions.Operation = "VideosApi.DeleteAttachmentByVideoId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/videos/{videoId}/attachments/{attachmentType}/{locale}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAttachmentByVideoId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an attachment Delete an attachment (and the attached file)
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAttachmentByVideoIdAsync(string videoId, string attachmentType, string locale, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAttachmentByVideoIdWithHttpInfoAsync(videoId, attachmentType, locale, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an attachment Delete an attachment (and the attached file)
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<Object>> DeleteAttachmentByVideoIdWithHttpInfoAsync(string videoId, string attachmentType, string locale, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->DeleteAttachmentByVideoId");
            }

            // verify the required parameter 'attachmentType' is set
            if (attachmentType == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'attachmentType' when calling VideosApi->DeleteAttachmentByVideoId");
            }

            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'locale' when calling VideosApi->DeleteAttachmentByVideoId");
            }


            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentType", Api42Vb.Client.ClientUtils.ParameterToString(attachmentType)); // path parameter
            localVarRequestOptions.PathParameters.Add("locale", Api42Vb.Client.ClientUtils.ParameterToString(locale)); // path parameter

            localVarRequestOptions.Operation = "VideosApi.DeleteAttachmentByVideoId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/videos/{videoId}/attachments/{attachmentType}/{locale}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAttachmentByVideoId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a thumbnail 
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteThumbnailByVideoId(string videoId, int operationIndex = 0)
        {
            DeleteThumbnailByVideoIdWithHttpInfo(videoId);
        }

        /// <summary>
        /// Delete a thumbnail 
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Api42Vb.Client.ApiResponse<Object> DeleteThumbnailByVideoIdWithHttpInfo(string videoId, int operationIndex = 0)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->DeleteThumbnailByVideoId");
            }

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            localVarRequestOptions.Operation = "VideosApi.DeleteThumbnailByVideoId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/videos/{videoId}/thumbnail", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteThumbnailByVideoId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a thumbnail 
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteThumbnailByVideoIdAsync(string videoId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteThumbnailByVideoIdWithHttpInfoAsync(videoId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a thumbnail 
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<Object>> DeleteThumbnailByVideoIdWithHttpInfoAsync(string videoId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->DeleteThumbnailByVideoId");
            }


            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            localVarRequestOptions.Operation = "VideosApi.DeleteThumbnailByVideoId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/videos/{videoId}/thumbnail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteThumbnailByVideoId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a video 
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteVideoById(string videoId, int operationIndex = 0)
        {
            DeleteVideoByIdWithHttpInfo(videoId);
        }

        /// <summary>
        /// Delete a video 
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Api42Vb.Client.ApiResponse<Object> DeleteVideoByIdWithHttpInfo(string videoId, int operationIndex = 0)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->DeleteVideoById");
            }

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            localVarRequestOptions.Operation = "VideosApi.DeleteVideoById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/videos/{videoId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVideoById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a video 
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteVideoByIdAsync(string videoId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteVideoByIdWithHttpInfoAsync(videoId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a video 
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<Object>> DeleteVideoByIdWithHttpInfoAsync(string videoId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->DeleteVideoById");
            }


            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            localVarRequestOptions.Operation = "VideosApi.DeleteVideoById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/videos/{videoId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVideoById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Multipart upload finalization Once video parts are uploaded, finalize the upload by requesting to transcode the file.  New video file is replacing previous video file.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="videoMultipartUploadFinalize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void FinalizeMultipartUploadVideoById(string videoId, VideoMultipartUploadFinalize? videoMultipartUploadFinalize = default(VideoMultipartUploadFinalize?), int operationIndex = 0)
        {
            FinalizeMultipartUploadVideoByIdWithHttpInfo(videoId, videoMultipartUploadFinalize);
        }

        /// <summary>
        /// Multipart upload finalization Once video parts are uploaded, finalize the upload by requesting to transcode the file.  New video file is replacing previous video file.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="videoMultipartUploadFinalize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Api42Vb.Client.ApiResponse<Object> FinalizeMultipartUploadVideoByIdWithHttpInfo(string videoId, VideoMultipartUploadFinalize? videoMultipartUploadFinalize = default(VideoMultipartUploadFinalize?), int operationIndex = 0)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->FinalizeMultipartUploadVideoById");
            }

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = videoMultipartUploadFinalize;

            localVarRequestOptions.Operation = "VideosApi.FinalizeMultipartUploadVideoById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/videos/{videoId}/multipart-upload/finalize", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FinalizeMultipartUploadVideoById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Multipart upload finalization Once video parts are uploaded, finalize the upload by requesting to transcode the file.  New video file is replacing previous video file.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="videoMultipartUploadFinalize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FinalizeMultipartUploadVideoByIdAsync(string videoId, VideoMultipartUploadFinalize? videoMultipartUploadFinalize = default(VideoMultipartUploadFinalize?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await FinalizeMultipartUploadVideoByIdWithHttpInfoAsync(videoId, videoMultipartUploadFinalize, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Multipart upload finalization Once video parts are uploaded, finalize the upload by requesting to transcode the file.  New video file is replacing previous video file.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="videoMultipartUploadFinalize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<Object>> FinalizeMultipartUploadVideoByIdWithHttpInfoAsync(string videoId, VideoMultipartUploadFinalize? videoMultipartUploadFinalize = default(VideoMultipartUploadFinalize?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->FinalizeMultipartUploadVideoById");
            }


            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = videoMultipartUploadFinalize;

            localVarRequestOptions.Operation = "VideosApi.FinalizeMultipartUploadVideoById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/videos/{videoId}/multipart-upload/finalize", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FinalizeMultipartUploadVideoById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Single file upload finalization Once video file is uploaded, finalize the upload by requesting to transcode the file. Finalize apply to the last signedurl provided by the upload initialization.  New video file is replacing previous video file.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void FinalizeUploadVideoById(string videoId, int operationIndex = 0)
        {
            FinalizeUploadVideoByIdWithHttpInfo(videoId);
        }

        /// <summary>
        /// Single file upload finalization Once video file is uploaded, finalize the upload by requesting to transcode the file. Finalize apply to the last signedurl provided by the upload initialization.  New video file is replacing previous video file.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Api42Vb.Client.ApiResponse<Object> FinalizeUploadVideoByIdWithHttpInfo(string videoId, int operationIndex = 0)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->FinalizeUploadVideoById");
            }

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            localVarRequestOptions.Operation = "VideosApi.FinalizeUploadVideoById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/videos/{videoId}/upload/finalize", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FinalizeUploadVideoById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Single file upload finalization Once video file is uploaded, finalize the upload by requesting to transcode the file. Finalize apply to the last signedurl provided by the upload initialization.  New video file is replacing previous video file.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FinalizeUploadVideoByIdAsync(string videoId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await FinalizeUploadVideoByIdWithHttpInfoAsync(videoId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Single file upload finalization Once video file is uploaded, finalize the upload by requesting to transcode the file. Finalize apply to the last signedurl provided by the upload initialization.  New video file is replacing previous video file.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<Object>> FinalizeUploadVideoByIdWithHttpInfoAsync(string videoId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->FinalizeUploadVideoById");
            }


            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            localVarRequestOptions.Operation = "VideosApi.FinalizeUploadVideoById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/videos/{videoId}/upload/finalize", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FinalizeUploadVideoById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the attachment Get a video attachement object
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetAttachmentByVideoId(string videoId, string attachmentType, string locale, int operationIndex = 0)
        {
            GetAttachmentByVideoIdWithHttpInfo(videoId, attachmentType, locale);
        }

        /// <summary>
        /// Get the attachment Get a video attachement object
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Api42Vb.Client.ApiResponse<Object> GetAttachmentByVideoIdWithHttpInfo(string videoId, string attachmentType, string locale, int operationIndex = 0)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->GetAttachmentByVideoId");
            }

            // verify the required parameter 'attachmentType' is set
            if (attachmentType == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'attachmentType' when calling VideosApi->GetAttachmentByVideoId");
            }

            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'locale' when calling VideosApi->GetAttachmentByVideoId");
            }

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentType", Api42Vb.Client.ClientUtils.ParameterToString(attachmentType)); // path parameter
            localVarRequestOptions.PathParameters.Add("locale", Api42Vb.Client.ClientUtils.ParameterToString(locale)); // path parameter

            localVarRequestOptions.Operation = "VideosApi.GetAttachmentByVideoId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/videos/{videoId}/attachments/{attachmentType}/{locale}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttachmentByVideoId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the attachment Get a video attachement object
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAttachmentByVideoIdAsync(string videoId, string attachmentType, string locale, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAttachmentByVideoIdWithHttpInfoAsync(videoId, attachmentType, locale, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get the attachment Get a video attachement object
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<Object>> GetAttachmentByVideoIdWithHttpInfoAsync(string videoId, string attachmentType, string locale, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->GetAttachmentByVideoId");
            }

            // verify the required parameter 'attachmentType' is set
            if (attachmentType == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'attachmentType' when calling VideosApi->GetAttachmentByVideoId");
            }

            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'locale' when calling VideosApi->GetAttachmentByVideoId");
            }


            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentType", Api42Vb.Client.ClientUtils.ParameterToString(attachmentType)); // path parameter
            localVarRequestOptions.PathParameters.Add("locale", Api42Vb.Client.ClientUtils.ParameterToString(locale)); // path parameter

            localVarRequestOptions.Operation = "VideosApi.GetAttachmentByVideoId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/videos/{videoId}/attachments/{attachmentType}/{locale}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttachmentByVideoId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get attachement file Get the attachement file Currently only text/plain files are handled.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetAttachmentFileByVideoId(string videoId, string attachmentType, string locale, int operationIndex = 0)
        {
            GetAttachmentFileByVideoIdWithHttpInfo(videoId, attachmentType, locale);
        }

        /// <summary>
        /// Get attachement file Get the attachement file Currently only text/plain files are handled.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Api42Vb.Client.ApiResponse<Object> GetAttachmentFileByVideoIdWithHttpInfo(string videoId, string attachmentType, string locale, int operationIndex = 0)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->GetAttachmentFileByVideoId");
            }

            // verify the required parameter 'attachmentType' is set
            if (attachmentType == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'attachmentType' when calling VideosApi->GetAttachmentFileByVideoId");
            }

            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'locale' when calling VideosApi->GetAttachmentFileByVideoId");
            }

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentType", Api42Vb.Client.ClientUtils.ParameterToString(attachmentType)); // path parameter
            localVarRequestOptions.PathParameters.Add("locale", Api42Vb.Client.ClientUtils.ParameterToString(locale)); // path parameter

            localVarRequestOptions.Operation = "VideosApi.GetAttachmentFileByVideoId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/videos/{videoId}/attachments/{attachmentType}/{locale}/file", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttachmentFileByVideoId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get attachement file Get the attachement file Currently only text/plain files are handled.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetAttachmentFileByVideoIdAsync(string videoId, string attachmentType, string locale, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetAttachmentFileByVideoIdWithHttpInfoAsync(videoId, attachmentType, locale, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get attachement file Get the attachement file Currently only text/plain files are handled.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">Type of attachment</param>
        /// <param name="locale">Le locale value of the attachment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<Object>> GetAttachmentFileByVideoIdWithHttpInfoAsync(string videoId, string attachmentType, string locale, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->GetAttachmentFileByVideoId");
            }

            // verify the required parameter 'attachmentType' is set
            if (attachmentType == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'attachmentType' when calling VideosApi->GetAttachmentFileByVideoId");
            }

            // verify the required parameter 'locale' is set
            if (locale == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'locale' when calling VideosApi->GetAttachmentFileByVideoId");
            }


            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.PathParameters.Add("attachmentType", Api42Vb.Client.ClientUtils.ParameterToString(attachmentType)); // path parameter
            localVarRequestOptions.PathParameters.Add("locale", Api42Vb.Client.ClientUtils.ParameterToString(locale)); // path parameter

            localVarRequestOptions.Operation = "VideosApi.GetAttachmentFileByVideoId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/videos/{videoId}/attachments/{attachmentType}/{locale}/file", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttachmentFileByVideoId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of attachments Return a list of attachments to a videos
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">The type of attachments (optional)</param>
        /// <param name="locale">The locale (optional)</param>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VideoAttachmentList</returns>
        public VideoAttachmentList GetAttachmentsByVideoId(string videoId, string? attachmentType = default(string?), string? locale = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            Api42Vb.Client.ApiResponse<VideoAttachmentList> localVarResponse = GetAttachmentsByVideoIdWithHttpInfo(videoId, attachmentType, locale, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of attachments Return a list of attachments to a videos
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">The type of attachments (optional)</param>
        /// <param name="locale">The locale (optional)</param>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VideoAttachmentList</returns>
        public Api42Vb.Client.ApiResponse<VideoAttachmentList> GetAttachmentsByVideoIdWithHttpInfo(string videoId, string? attachmentType = default(string?), string? locale = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->GetAttachmentsByVideoId");
            }

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            if (attachmentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "attachmentType", attachmentType));
            }
            if (locale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "locale", locale));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "VideosApi.GetAttachmentsByVideoId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VideoAttachmentList>("/videos/{videoId}/attachments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttachmentsByVideoId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of attachments Return a list of attachments to a videos
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">The type of attachments (optional)</param>
        /// <param name="locale">The locale (optional)</param>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VideoAttachmentList</returns>
        public async System.Threading.Tasks.Task<VideoAttachmentList> GetAttachmentsByVideoIdAsync(string videoId, string? attachmentType = default(string?), string? locale = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Api42Vb.Client.ApiResponse<VideoAttachmentList> localVarResponse = await GetAttachmentsByVideoIdWithHttpInfoAsync(videoId, attachmentType, locale, limit, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of attachments Return a list of attachments to a videos
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="attachmentType">The type of attachments (optional)</param>
        /// <param name="locale">The locale (optional)</param>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VideoAttachmentList)</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<VideoAttachmentList>> GetAttachmentsByVideoIdWithHttpInfoAsync(string videoId, string? attachmentType = default(string?), string? locale = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->GetAttachmentsByVideoId");
            }


            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            if (attachmentType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "attachmentType", attachmentType));
            }
            if (locale != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "locale", locale));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "VideosApi.GetAttachmentsByVideoId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VideoAttachmentList>("/videos/{videoId}/attachments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttachmentsByVideoId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retun a single video 
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="token">add a token to assets to alloaw access to private video (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Video</returns>
        public Video GetVideoById(string videoId, bool? token = default(bool?), int operationIndex = 0)
        {
            Api42Vb.Client.ApiResponse<Video> localVarResponse = GetVideoByIdWithHttpInfo(videoId, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retun a single video 
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="token">add a token to assets to alloaw access to private video (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Video</returns>
        public Api42Vb.Client.ApiResponse<Video> GetVideoByIdWithHttpInfo(string videoId, bool? token = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->GetVideoById");
            }

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }

            localVarRequestOptions.Operation = "VideosApi.GetVideoById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Video>("/videos/{videoId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideoById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retun a single video 
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="token">add a token to assets to alloaw access to private video (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Video</returns>
        public async System.Threading.Tasks.Task<Video> GetVideoByIdAsync(string videoId, bool? token = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Api42Vb.Client.ApiResponse<Video> localVarResponse = await GetVideoByIdWithHttpInfoAsync(videoId, token, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retun a single video 
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="token">add a token to assets to alloaw access to private video (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Video)</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<Video>> GetVideoByIdWithHttpInfoAsync(string videoId, bool? token = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->GetVideoById");
            }


            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            if (token != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "token", token));
            }

            localVarRequestOptions.Operation = "VideosApi.GetVideoById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Video>("/videos/{videoId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideoById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retun the detailed status of the video 
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VideoStatus</returns>
        public VideoStatus GetVideoStatusById(string videoId, int operationIndex = 0)
        {
            Api42Vb.Client.ApiResponse<VideoStatus> localVarResponse = GetVideoStatusByIdWithHttpInfo(videoId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retun the detailed status of the video 
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VideoStatus</returns>
        public Api42Vb.Client.ApiResponse<VideoStatus> GetVideoStatusByIdWithHttpInfo(string videoId, int operationIndex = 0)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->GetVideoStatusById");
            }

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            localVarRequestOptions.Operation = "VideosApi.GetVideoStatusById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VideoStatus>("/videos/{videoId}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideoStatusById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retun the detailed status of the video 
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VideoStatus</returns>
        public async System.Threading.Tasks.Task<VideoStatus> GetVideoStatusByIdAsync(string videoId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Api42Vb.Client.ApiResponse<VideoStatus> localVarResponse = await GetVideoStatusByIdWithHttpInfoAsync(videoId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retun the detailed status of the video 
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VideoStatus)</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<VideoStatus>> GetVideoStatusByIdWithHttpInfoAsync(string videoId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->GetVideoStatusById");
            }


            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            localVarRequestOptions.Operation = "VideosApi.GetVideoStatusById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VideoStatus>("/videos/{videoId}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideoStatusById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List videos Return the list of videos.  Return an empty list it there is no video to return.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="search">Keywords search in all indexed fields (optional)</param>
        /// <param name="sort">Sorting results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VideoList</returns>
        public VideoList GetVideos(int? limit = default(int?), int? offset = default(int?), string? search = default(string?), string? sort = default(string?), int operationIndex = 0)
        {
            Api42Vb.Client.ApiResponse<VideoList> localVarResponse = GetVideosWithHttpInfo(limit, offset, search, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List videos Return the list of videos.  Return an empty list it there is no video to return.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="search">Keywords search in all indexed fields (optional)</param>
        /// <param name="sort">Sorting results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VideoList</returns>
        public Api42Vb.Client.ApiResponse<VideoList> GetVideosWithHttpInfo(int? limit = default(int?), int? offset = default(int?), string? search = default(string?), string? sort = default(string?), int operationIndex = 0)
        {
            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "VideosApi.GetVideos";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VideoList>("/videos", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List videos Return the list of videos.  Return an empty list it there is no video to return.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="search">Keywords search in all indexed fields (optional)</param>
        /// <param name="sort">Sorting results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VideoList</returns>
        public async System.Threading.Tasks.Task<VideoList> GetVideosAsync(int? limit = default(int?), int? offset = default(int?), string? search = default(string?), string? sort = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Api42Vb.Client.ApiResponse<VideoList> localVarResponse = await GetVideosWithHttpInfoAsync(limit, offset, search, sort, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List videos Return the list of videos.  Return an empty list it there is no video to return.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="search">Keywords search in all indexed fields (optional)</param>
        /// <param name="sort">Sorting results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VideoList)</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<VideoList>> GetVideosWithHttpInfoAsync(int? limit = default(int?), int? offset = default(int?), string? search = default(string?), string? sort = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "VideosApi.GetVideos";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VideoList>("/videos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideos", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Multipart upload intialization Get signed urls to upload a big file split in multiparts Once the video is uploaded, do not forget to call the multipart upload finalize  New video file is replacing previous video file.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="videoMultipartUploadInit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VideoMultipartUploadInitResponse</returns>
        public VideoMultipartUploadInitResponse InitMultipartUploadVideoById(string videoId, VideoMultipartUploadInit? videoMultipartUploadInit = default(VideoMultipartUploadInit?), int operationIndex = 0)
        {
            Api42Vb.Client.ApiResponse<VideoMultipartUploadInitResponse> localVarResponse = InitMultipartUploadVideoByIdWithHttpInfo(videoId, videoMultipartUploadInit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Multipart upload intialization Get signed urls to upload a big file split in multiparts Once the video is uploaded, do not forget to call the multipart upload finalize  New video file is replacing previous video file.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="videoMultipartUploadInit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VideoMultipartUploadInitResponse</returns>
        public Api42Vb.Client.ApiResponse<VideoMultipartUploadInitResponse> InitMultipartUploadVideoByIdWithHttpInfo(string videoId, VideoMultipartUploadInit? videoMultipartUploadInit = default(VideoMultipartUploadInit?), int operationIndex = 0)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->InitMultipartUploadVideoById");
            }

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = videoMultipartUploadInit;

            localVarRequestOptions.Operation = "VideosApi.InitMultipartUploadVideoById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<VideoMultipartUploadInitResponse>("/videos/{videoId}/multipart-upload/init", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitMultipartUploadVideoById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Multipart upload intialization Get signed urls to upload a big file split in multiparts Once the video is uploaded, do not forget to call the multipart upload finalize  New video file is replacing previous video file.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="videoMultipartUploadInit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VideoMultipartUploadInitResponse</returns>
        public async System.Threading.Tasks.Task<VideoMultipartUploadInitResponse> InitMultipartUploadVideoByIdAsync(string videoId, VideoMultipartUploadInit? videoMultipartUploadInit = default(VideoMultipartUploadInit?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Api42Vb.Client.ApiResponse<VideoMultipartUploadInitResponse> localVarResponse = await InitMultipartUploadVideoByIdWithHttpInfoAsync(videoId, videoMultipartUploadInit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Multipart upload intialization Get signed urls to upload a big file split in multiparts Once the video is uploaded, do not forget to call the multipart upload finalize  New video file is replacing previous video file.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="videoMultipartUploadInit"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VideoMultipartUploadInitResponse)</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<VideoMultipartUploadInitResponse>> InitMultipartUploadVideoByIdWithHttpInfoAsync(string videoId, VideoMultipartUploadInit? videoMultipartUploadInit = default(VideoMultipartUploadInit?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->InitMultipartUploadVideoById");
            }


            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = videoMultipartUploadInit;

            localVarRequestOptions.Operation = "VideosApi.InitMultipartUploadVideoById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<VideoMultipartUploadInitResponse>("/videos/{videoId}/multipart-upload/init", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitMultipartUploadVideoById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Single file upload intialization Get a single signed url to upload a file Once the video is uploaded, do not forget to call the single upload finalize  File formats currently supported: avi, mov, mp4, mpeg, mpg, mxf, ts. New video file is replacing previous video file.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VideoUploadInitResponse</returns>
        public VideoUploadInitResponse InitUploadVideoById(string videoId, int operationIndex = 0)
        {
            Api42Vb.Client.ApiResponse<VideoUploadInitResponse> localVarResponse = InitUploadVideoByIdWithHttpInfo(videoId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Single file upload intialization Get a single signed url to upload a file Once the video is uploaded, do not forget to call the single upload finalize  File formats currently supported: avi, mov, mp4, mpeg, mpg, mxf, ts. New video file is replacing previous video file.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VideoUploadInitResponse</returns>
        public Api42Vb.Client.ApiResponse<VideoUploadInitResponse> InitUploadVideoByIdWithHttpInfo(string videoId, int operationIndex = 0)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->InitUploadVideoById");
            }

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            localVarRequestOptions.Operation = "VideosApi.InitUploadVideoById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VideoUploadInitResponse>("/videos/{videoId}/upload/init", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitUploadVideoById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Single file upload intialization Get a single signed url to upload a file Once the video is uploaded, do not forget to call the single upload finalize  File formats currently supported: avi, mov, mp4, mpeg, mpg, mxf, ts. New video file is replacing previous video file.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VideoUploadInitResponse</returns>
        public async System.Threading.Tasks.Task<VideoUploadInitResponse> InitUploadVideoByIdAsync(string videoId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Api42Vb.Client.ApiResponse<VideoUploadInitResponse> localVarResponse = await InitUploadVideoByIdWithHttpInfoAsync(videoId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Single file upload intialization Get a single signed url to upload a file Once the video is uploaded, do not forget to call the single upload finalize  File formats currently supported: avi, mov, mp4, mpeg, mpg, mxf, ts. New video file is replacing previous video file.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VideoUploadInitResponse)</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<VideoUploadInitResponse>> InitUploadVideoByIdWithHttpInfoAsync(string videoId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->InitUploadVideoById");
            }


            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter

            localVarRequestOptions.Operation = "VideosApi.InitUploadVideoById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VideoUploadInitResponse>("/videos/{videoId}/upload/init", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitUploadVideoById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing video Update video properties  Only properties provided are updated.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="videoProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateVideoById(string videoId, VideoProperties videoProperties, int operationIndex = 0)
        {
            UpdateVideoByIdWithHttpInfo(videoId, videoProperties);
        }

        /// <summary>
        /// Update an existing video Update video properties  Only properties provided are updated.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="videoProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Api42Vb.Client.ApiResponse<Object> UpdateVideoByIdWithHttpInfo(string videoId, VideoProperties videoProperties, int operationIndex = 0)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->UpdateVideoById");
            }

            // verify the required parameter 'videoProperties' is set
            if (videoProperties == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoProperties' when calling VideosApi->UpdateVideoById");
            }

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = videoProperties;

            localVarRequestOptions.Operation = "VideosApi.UpdateVideoById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/videos/{videoId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateVideoById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing video Update video properties  Only properties provided are updated.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="videoProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateVideoByIdAsync(string videoId, VideoProperties videoProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateVideoByIdWithHttpInfoAsync(videoId, videoProperties, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update an existing video Update video properties  Only properties provided are updated.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">Id of the video</param>
        /// <param name="videoProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<Object>> UpdateVideoByIdWithHttpInfoAsync(string videoId, VideoProperties videoProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoId' when calling VideosApi->UpdateVideoById");
            }

            // verify the required parameter 'videoProperties' is set
            if (videoProperties == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'videoProperties' when calling VideosApi->UpdateVideoById");
            }


            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("videoId", Api42Vb.Client.ClientUtils.ParameterToString(videoId)); // path parameter
            localVarRequestOptions.Data = videoProperties;

            localVarRequestOptions.Operation = "VideosApi.UpdateVideoById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/videos/{videoId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateVideoById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
