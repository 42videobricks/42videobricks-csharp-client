/*
 * 42videobricks
 *
 * 42videobricks is a Video Platform As A Service (VPaaS)
 *
 * The version of the OpenAPI document: 1.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Api42Vb.Client;
using Api42Vb.Model;

namespace Api42Vb.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a new webhook
        /// </summary>
        /// <remarks>
        /// Create a new webhook to configure notification.  Only one hook per url
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Webhook</returns>
        Webhook AddWebhook(WebhookProperties webhookProperties, int operationIndex = 0);

        /// <summary>
        /// Add a new webhook
        /// </summary>
        /// <remarks>
        /// Create a new webhook to configure notification.  Only one hook per url
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Webhook</returns>
        ApiResponse<Webhook> AddWebhookWithHttpInfo(WebhookProperties webhookProperties, int operationIndex = 0);
        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Delete a webhook.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Id of the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteWebhookById(string webhookId, int operationIndex = 0);

        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Delete a webhook.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Id of the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWebhookByIdWithHttpInfo(string webhookId, int operationIndex = 0);
        /// <summary>
        /// Retun a single webhook
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Id of the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Webhook</returns>
        Webhook GetWebhookById(string webhookId, int operationIndex = 0);

        /// <summary>
        /// Retun a single webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Id of the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Webhook</returns>
        ApiResponse<Webhook> GetWebhookByIdWithHttpInfo(string webhookId, int operationIndex = 0);
        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// Return the list of webhooks.  Return an empty list it there are no webhook to return.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookList</returns>
        WebhookList GetWebhooks(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// Return the list of webhooks.  Return an empty list it there are no webhook to return.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookList</returns>
        ApiResponse<WebhookList> GetWebhooksWithHttpInfo(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// Update an existing webhook
        /// </summary>
        /// <remarks>
        /// Update a existing webhooks.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Id of the webhook</param>
        /// <param name="webhookProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Webhook</returns>
        Webhook UpdateWebhookById(string webhookId, WebhookProperties webhookProperties, int operationIndex = 0);

        /// <summary>
        /// Update an existing webhook
        /// </summary>
        /// <remarks>
        /// Update a existing webhooks.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Id of the webhook</param>
        /// <param name="webhookProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Webhook</returns>
        ApiResponse<Webhook> UpdateWebhookByIdWithHttpInfo(string webhookId, WebhookProperties webhookProperties, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a new webhook
        /// </summary>
        /// <remarks>
        /// Create a new webhook to configure notification.  Only one hook per url
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Webhook</returns>
        System.Threading.Tasks.Task<Webhook> AddWebhookAsync(WebhookProperties webhookProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a new webhook
        /// </summary>
        /// <remarks>
        /// Create a new webhook to configure notification.  Only one hook per url
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Webhook>> AddWebhookWithHttpInfoAsync(WebhookProperties webhookProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Delete a webhook.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Id of the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWebhookByIdAsync(string webhookId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a webhook
        /// </summary>
        /// <remarks>
        /// Delete a webhook.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Id of the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhookByIdWithHttpInfoAsync(string webhookId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retun a single webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Id of the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Webhook</returns>
        System.Threading.Tasks.Task<Webhook> GetWebhookByIdAsync(string webhookId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retun a single webhook
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Id of the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Webhook>> GetWebhookByIdWithHttpInfoAsync(string webhookId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// Return the list of webhooks.  Return an empty list it there are no webhook to return.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookList</returns>
        System.Threading.Tasks.Task<WebhookList> GetWebhooksAsync(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List webhooks
        /// </summary>
        /// <remarks>
        /// Return the list of webhooks.  Return an empty list it there are no webhook to return.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookList)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookList>> GetWebhooksWithHttpInfoAsync(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an existing webhook
        /// </summary>
        /// <remarks>
        /// Update a existing webhooks.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Id of the webhook</param>
        /// <param name="webhookProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Webhook</returns>
        System.Threading.Tasks.Task<Webhook> UpdateWebhookByIdAsync(string webhookId, WebhookProperties webhookProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an existing webhook
        /// </summary>
        /// <remarks>
        /// Update a existing webhooks.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Id of the webhook</param>
        /// <param name="webhookProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Webhook>> UpdateWebhookByIdWithHttpInfoAsync(string webhookId, WebhookProperties webhookProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApi : IWebhooksApiSync, IWebhooksApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebhooksApi : IWebhooksApi
    {
        private Api42Vb.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi(string basePath)
        {
            this.Configuration = Api42Vb.Client.Configuration.MergeConfigurations(
                Api42Vb.Client.GlobalConfiguration.Instance,
                new Api42Vb.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Api42Vb.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Api42Vb.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Api42Vb.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebhooksApi(Api42Vb.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Api42Vb.Client.Configuration.MergeConfigurations(
                Api42Vb.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Api42Vb.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Api42Vb.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Api42Vb.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WebhooksApi(Api42Vb.Client.ISynchronousClient client, Api42Vb.Client.IAsynchronousClient asyncClient, Api42Vb.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Api42Vb.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Api42Vb.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Api42Vb.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Api42Vb.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Api42Vb.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a new webhook Create a new webhook to configure notification.  Only one hook per url
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Webhook</returns>
        public Webhook AddWebhook(WebhookProperties webhookProperties, int operationIndex = 0)
        {
            Api42Vb.Client.ApiResponse<Webhook> localVarResponse = AddWebhookWithHttpInfo(webhookProperties);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new webhook Create a new webhook to configure notification.  Only one hook per url
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Webhook</returns>
        public Api42Vb.Client.ApiResponse<Webhook> AddWebhookWithHttpInfo(WebhookProperties webhookProperties, int operationIndex = 0)
        {
            // verify the required parameter 'webhookProperties' is set
            if (webhookProperties == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'webhookProperties' when calling WebhooksApi->AddWebhook");
            }

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = webhookProperties;

            localVarRequestOptions.Operation = "WebhooksApi.AddWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Webhook>("/webhooks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new webhook Create a new webhook to configure notification.  Only one hook per url
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Webhook</returns>
        public async System.Threading.Tasks.Task<Webhook> AddWebhookAsync(WebhookProperties webhookProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Api42Vb.Client.ApiResponse<Webhook> localVarResponse = await AddWebhookWithHttpInfoAsync(webhookProperties, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new webhook Create a new webhook to configure notification.  Only one hook per url
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<Webhook>> AddWebhookWithHttpInfoAsync(WebhookProperties webhookProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'webhookProperties' is set
            if (webhookProperties == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'webhookProperties' when calling WebhooksApi->AddWebhook");
            }


            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = webhookProperties;

            localVarRequestOptions.Operation = "WebhooksApi.AddWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Webhook>("/webhooks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a webhook Delete a webhook.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Id of the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteWebhookById(string webhookId, int operationIndex = 0)
        {
            DeleteWebhookByIdWithHttpInfo(webhookId);
        }

        /// <summary>
        /// Delete a webhook Delete a webhook.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Id of the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Api42Vb.Client.ApiResponse<Object> DeleteWebhookByIdWithHttpInfo(string webhookId, int operationIndex = 0)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->DeleteWebhookById");
            }

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("webhookId", Api42Vb.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.DeleteWebhookById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/webhooks/{webhookId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebhookById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a webhook Delete a webhook.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Id of the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWebhookByIdAsync(string webhookId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteWebhookByIdWithHttpInfoAsync(webhookId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a webhook Delete a webhook.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Id of the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<Object>> DeleteWebhookByIdWithHttpInfoAsync(string webhookId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->DeleteWebhookById");
            }


            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("webhookId", Api42Vb.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.DeleteWebhookById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/webhooks/{webhookId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebhookById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retun a single webhook 
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Id of the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Webhook</returns>
        public Webhook GetWebhookById(string webhookId, int operationIndex = 0)
        {
            Api42Vb.Client.ApiResponse<Webhook> localVarResponse = GetWebhookByIdWithHttpInfo(webhookId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retun a single webhook 
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Id of the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Webhook</returns>
        public Api42Vb.Client.ApiResponse<Webhook> GetWebhookByIdWithHttpInfo(string webhookId, int operationIndex = 0)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->GetWebhookById");
            }

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("webhookId", Api42Vb.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.GetWebhookById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Webhook>("/webhooks/{webhookId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhookById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retun a single webhook 
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Id of the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Webhook</returns>
        public async System.Threading.Tasks.Task<Webhook> GetWebhookByIdAsync(string webhookId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Api42Vb.Client.ApiResponse<Webhook> localVarResponse = await GetWebhookByIdWithHttpInfoAsync(webhookId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retun a single webhook 
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Id of the webhook</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<Webhook>> GetWebhookByIdWithHttpInfoAsync(string webhookId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->GetWebhookById");
            }


            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("webhookId", Api42Vb.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.GetWebhookById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Webhook>("/webhooks/{webhookId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhookById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List webhooks Return the list of webhooks.  Return an empty list it there are no webhook to return.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookList</returns>
        public WebhookList GetWebhooks(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            Api42Vb.Client.ApiResponse<WebhookList> localVarResponse = GetWebhooksWithHttpInfo(limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List webhooks Return the list of webhooks.  Return an empty list it there are no webhook to return.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookList</returns>
        public Api42Vb.Client.ApiResponse<WebhookList> GetWebhooksWithHttpInfo(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "WebhooksApi.GetWebhooks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WebhookList>("/webhooks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List webhooks Return the list of webhooks.  Return an empty list it there are no webhook to return.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookList</returns>
        public async System.Threading.Tasks.Task<WebhookList> GetWebhooksAsync(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Api42Vb.Client.ApiResponse<WebhookList> localVarResponse = await GetWebhooksWithHttpInfoAsync(limit, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List webhooks Return the list of webhooks.  Return an empty list it there are no webhook to return.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookList)</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<WebhookList>> GetWebhooksWithHttpInfoAsync(int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "WebhooksApi.GetWebhooks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<WebhookList>("/webhooks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing webhook Update a existing webhooks.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Id of the webhook</param>
        /// <param name="webhookProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Webhook</returns>
        public Webhook UpdateWebhookById(string webhookId, WebhookProperties webhookProperties, int operationIndex = 0)
        {
            Api42Vb.Client.ApiResponse<Webhook> localVarResponse = UpdateWebhookByIdWithHttpInfo(webhookId, webhookProperties);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing webhook Update a existing webhooks.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Id of the webhook</param>
        /// <param name="webhookProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Webhook</returns>
        public Api42Vb.Client.ApiResponse<Webhook> UpdateWebhookByIdWithHttpInfo(string webhookId, WebhookProperties webhookProperties, int operationIndex = 0)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->UpdateWebhookById");
            }

            // verify the required parameter 'webhookProperties' is set
            if (webhookProperties == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'webhookProperties' when calling WebhooksApi->UpdateWebhookById");
            }

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("webhookId", Api42Vb.Client.ClientUtils.ParameterToString(webhookId)); // path parameter
            localVarRequestOptions.Data = webhookProperties;

            localVarRequestOptions.Operation = "WebhooksApi.UpdateWebhookById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Webhook>("/webhooks/{webhookId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebhookById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing webhook Update a existing webhooks.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Id of the webhook</param>
        /// <param name="webhookProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Webhook</returns>
        public async System.Threading.Tasks.Task<Webhook> UpdateWebhookByIdAsync(string webhookId, WebhookProperties webhookProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Api42Vb.Client.ApiResponse<Webhook> localVarResponse = await UpdateWebhookByIdWithHttpInfoAsync(webhookId, webhookProperties, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing webhook Update a existing webhooks.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId">Id of the webhook</param>
        /// <param name="webhookProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<Webhook>> UpdateWebhookByIdWithHttpInfoAsync(string webhookId, WebhookProperties webhookProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'webhookId' when calling WebhooksApi->UpdateWebhookById");
            }

            // verify the required parameter 'webhookProperties' is set
            if (webhookProperties == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'webhookProperties' when calling WebhooksApi->UpdateWebhookById");
            }


            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("webhookId", Api42Vb.Client.ClientUtils.ParameterToString(webhookId)); // path parameter
            localVarRequestOptions.Data = webhookProperties;

            localVarRequestOptions.Operation = "WebhooksApi.UpdateWebhookById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Webhook>("/webhooks/{webhookId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebhookById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
