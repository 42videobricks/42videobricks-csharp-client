/*
 * 42videobricks
 *
 * 42videobricks is a Video Platform As A Service (VPaaS)
 *
 * The version of the OpenAPI document: 1.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Api42Vb.Client;
using Api42Vb.Model;

namespace Api42Vb.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlaylistsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a new playlist
        /// </summary>
        /// <remarks>
        /// Create a new playlist.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Playlist</returns>
        Playlist AddPlaylist(PlaylistProperties playlistProperties, int operationIndex = 0);

        /// <summary>
        /// Add a new playlist
        /// </summary>
        /// <remarks>
        /// Create a new playlist.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Playlist</returns>
        ApiResponse<Playlist> AddPlaylistWithHttpInfo(PlaylistProperties playlistProperties, int operationIndex = 0);
        /// <summary>
        /// Delete a playlist
        /// </summary>
        /// <remarks>
        /// Delete a playlist.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Id of the playlist</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeletePlaylistById(string playlistId, int operationIndex = 0);

        /// <summary>
        /// Delete a playlist
        /// </summary>
        /// <remarks>
        /// Delete a playlist.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Id of the playlist</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePlaylistByIdWithHttpInfo(string playlistId, int operationIndex = 0);
        /// <summary>
        /// Retun a single playlist
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Id of the playlist</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Playlist</returns>
        Playlist GetPlaylistById(string playlistId, int operationIndex = 0);

        /// <summary>
        /// Retun a single playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Id of the playlist</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Playlist</returns>
        ApiResponse<Playlist> GetPlaylistByIdWithHttpInfo(string playlistId, int operationIndex = 0);
        /// <summary>
        /// List playlists
        /// </summary>
        /// <remarks>
        /// Return the list of playlist.  Return an empty list it there is no playlist to return.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="search">Keywords search in all indexed fields (optional)</param>
        /// <param name="sort">Sorting results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlaylistList</returns>
        PlaylistList GetPlaylists(int? limit = default(int?), int? offset = default(int?), string? search = default(string?), string? sort = default(string?), int operationIndex = 0);

        /// <summary>
        /// List playlists
        /// </summary>
        /// <remarks>
        /// Return the list of playlist.  Return an empty list it there is no playlist to return.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="search">Keywords search in all indexed fields (optional)</param>
        /// <param name="sort">Sorting results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlaylistList</returns>
        ApiResponse<PlaylistList> GetPlaylistsWithHttpInfo(int? limit = default(int?), int? offset = default(int?), string? search = default(string?), string? sort = default(string?), int operationIndex = 0);
        /// <summary>
        /// Update an existing playlist
        /// </summary>
        /// <remarks>
        /// Update a existing playlist.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Id of the playlist</param>
        /// <param name="playlistProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Playlist</returns>
        Playlist UpdatePlaylistById(string playlistId, PlaylistProperties playlistProperties, int operationIndex = 0);

        /// <summary>
        /// Update an existing playlist
        /// </summary>
        /// <remarks>
        /// Update a existing playlist.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Id of the playlist</param>
        /// <param name="playlistProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Playlist</returns>
        ApiResponse<Playlist> UpdatePlaylistByIdWithHttpInfo(string playlistId, PlaylistProperties playlistProperties, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlaylistsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a new playlist
        /// </summary>
        /// <remarks>
        /// Create a new playlist.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Playlist</returns>
        System.Threading.Tasks.Task<Playlist> AddPlaylistAsync(PlaylistProperties playlistProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a new playlist
        /// </summary>
        /// <remarks>
        /// Create a new playlist.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Playlist)</returns>
        System.Threading.Tasks.Task<ApiResponse<Playlist>> AddPlaylistWithHttpInfoAsync(PlaylistProperties playlistProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a playlist
        /// </summary>
        /// <remarks>
        /// Delete a playlist.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Id of the playlist</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePlaylistByIdAsync(string playlistId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a playlist
        /// </summary>
        /// <remarks>
        /// Delete a playlist.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Id of the playlist</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePlaylistByIdWithHttpInfoAsync(string playlistId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retun a single playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Id of the playlist</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Playlist</returns>
        System.Threading.Tasks.Task<Playlist> GetPlaylistByIdAsync(string playlistId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retun a single playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Id of the playlist</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Playlist)</returns>
        System.Threading.Tasks.Task<ApiResponse<Playlist>> GetPlaylistByIdWithHttpInfoAsync(string playlistId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List playlists
        /// </summary>
        /// <remarks>
        /// Return the list of playlist.  Return an empty list it there is no playlist to return.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="search">Keywords search in all indexed fields (optional)</param>
        /// <param name="sort">Sorting results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaylistList</returns>
        System.Threading.Tasks.Task<PlaylistList> GetPlaylistsAsync(int? limit = default(int?), int? offset = default(int?), string? search = default(string?), string? sort = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List playlists
        /// </summary>
        /// <remarks>
        /// Return the list of playlist.  Return an empty list it there is no playlist to return.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="search">Keywords search in all indexed fields (optional)</param>
        /// <param name="sort">Sorting results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaylistList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlaylistList>> GetPlaylistsWithHttpInfoAsync(int? limit = default(int?), int? offset = default(int?), string? search = default(string?), string? sort = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an existing playlist
        /// </summary>
        /// <remarks>
        /// Update a existing playlist.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Id of the playlist</param>
        /// <param name="playlistProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Playlist</returns>
        System.Threading.Tasks.Task<Playlist> UpdatePlaylistByIdAsync(string playlistId, PlaylistProperties playlistProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an existing playlist
        /// </summary>
        /// <remarks>
        /// Update a existing playlist.
        /// </remarks>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Id of the playlist</param>
        /// <param name="playlistProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Playlist)</returns>
        System.Threading.Tasks.Task<ApiResponse<Playlist>> UpdatePlaylistByIdWithHttpInfoAsync(string playlistId, PlaylistProperties playlistProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlaylistsApi : IPlaylistsApiSync, IPlaylistsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlaylistsApi : IPlaylistsApi
    {
        private Api42Vb.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaylistsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlaylistsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaylistsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlaylistsApi(string basePath)
        {
            this.Configuration = Api42Vb.Client.Configuration.MergeConfigurations(
                Api42Vb.Client.GlobalConfiguration.Instance,
                new Api42Vb.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Api42Vb.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Api42Vb.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Api42Vb.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaylistsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlaylistsApi(Api42Vb.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Api42Vb.Client.Configuration.MergeConfigurations(
                Api42Vb.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Api42Vb.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Api42Vb.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Api42Vb.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaylistsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PlaylistsApi(Api42Vb.Client.ISynchronousClient client, Api42Vb.Client.IAsynchronousClient asyncClient, Api42Vb.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Api42Vb.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Api42Vb.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Api42Vb.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Api42Vb.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Api42Vb.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a new playlist Create a new playlist.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Playlist</returns>
        public Playlist AddPlaylist(PlaylistProperties playlistProperties, int operationIndex = 0)
        {
            Api42Vb.Client.ApiResponse<Playlist> localVarResponse = AddPlaylistWithHttpInfo(playlistProperties);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new playlist Create a new playlist.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Playlist</returns>
        public Api42Vb.Client.ApiResponse<Playlist> AddPlaylistWithHttpInfo(PlaylistProperties playlistProperties, int operationIndex = 0)
        {
            // verify the required parameter 'playlistProperties' is set
            if (playlistProperties == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'playlistProperties' when calling PlaylistsApi->AddPlaylist");
            }

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = playlistProperties;

            localVarRequestOptions.Operation = "PlaylistsApi.AddPlaylist";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Playlist>("/playlists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPlaylist", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new playlist Create a new playlist.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Playlist</returns>
        public async System.Threading.Tasks.Task<Playlist> AddPlaylistAsync(PlaylistProperties playlistProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Api42Vb.Client.ApiResponse<Playlist> localVarResponse = await AddPlaylistWithHttpInfoAsync(playlistProperties, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new playlist Create a new playlist.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Playlist)</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<Playlist>> AddPlaylistWithHttpInfoAsync(PlaylistProperties playlistProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'playlistProperties' is set
            if (playlistProperties == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'playlistProperties' when calling PlaylistsApi->AddPlaylist");
            }


            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = playlistProperties;

            localVarRequestOptions.Operation = "PlaylistsApi.AddPlaylist";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Playlist>("/playlists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPlaylist", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a playlist Delete a playlist.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Id of the playlist</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeletePlaylistById(string playlistId, int operationIndex = 0)
        {
            DeletePlaylistByIdWithHttpInfo(playlistId);
        }

        /// <summary>
        /// Delete a playlist Delete a playlist.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Id of the playlist</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Api42Vb.Client.ApiResponse<Object> DeletePlaylistByIdWithHttpInfo(string playlistId, int operationIndex = 0)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->DeletePlaylistById");
            }

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playlistId", Api42Vb.Client.ClientUtils.ParameterToString(playlistId)); // path parameter

            localVarRequestOptions.Operation = "PlaylistsApi.DeletePlaylistById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/playlists/{playlistId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePlaylistById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a playlist Delete a playlist.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Id of the playlist</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePlaylistByIdAsync(string playlistId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeletePlaylistByIdWithHttpInfoAsync(playlistId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a playlist Delete a playlist.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Id of the playlist</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<Object>> DeletePlaylistByIdWithHttpInfoAsync(string playlistId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->DeletePlaylistById");
            }


            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playlistId", Api42Vb.Client.ClientUtils.ParameterToString(playlistId)); // path parameter

            localVarRequestOptions.Operation = "PlaylistsApi.DeletePlaylistById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/playlists/{playlistId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePlaylistById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retun a single playlist 
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Id of the playlist</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Playlist</returns>
        public Playlist GetPlaylistById(string playlistId, int operationIndex = 0)
        {
            Api42Vb.Client.ApiResponse<Playlist> localVarResponse = GetPlaylistByIdWithHttpInfo(playlistId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retun a single playlist 
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Id of the playlist</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Playlist</returns>
        public Api42Vb.Client.ApiResponse<Playlist> GetPlaylistByIdWithHttpInfo(string playlistId, int operationIndex = 0)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->GetPlaylistById");
            }

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playlistId", Api42Vb.Client.ClientUtils.ParameterToString(playlistId)); // path parameter

            localVarRequestOptions.Operation = "PlaylistsApi.GetPlaylistById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Playlist>("/playlists/{playlistId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlaylistById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retun a single playlist 
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Id of the playlist</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Playlist</returns>
        public async System.Threading.Tasks.Task<Playlist> GetPlaylistByIdAsync(string playlistId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Api42Vb.Client.ApiResponse<Playlist> localVarResponse = await GetPlaylistByIdWithHttpInfoAsync(playlistId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retun a single playlist 
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Id of the playlist</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Playlist)</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<Playlist>> GetPlaylistByIdWithHttpInfoAsync(string playlistId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->GetPlaylistById");
            }


            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playlistId", Api42Vb.Client.ClientUtils.ParameterToString(playlistId)); // path parameter

            localVarRequestOptions.Operation = "PlaylistsApi.GetPlaylistById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Playlist>("/playlists/{playlistId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlaylistById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List playlists Return the list of playlist.  Return an empty list it there is no playlist to return.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="search">Keywords search in all indexed fields (optional)</param>
        /// <param name="sort">Sorting results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlaylistList</returns>
        public PlaylistList GetPlaylists(int? limit = default(int?), int? offset = default(int?), string? search = default(string?), string? sort = default(string?), int operationIndex = 0)
        {
            Api42Vb.Client.ApiResponse<PlaylistList> localVarResponse = GetPlaylistsWithHttpInfo(limit, offset, search, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List playlists Return the list of playlist.  Return an empty list it there is no playlist to return.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="search">Keywords search in all indexed fields (optional)</param>
        /// <param name="sort">Sorting results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlaylistList</returns>
        public Api42Vb.Client.ApiResponse<PlaylistList> GetPlaylistsWithHttpInfo(int? limit = default(int?), int? offset = default(int?), string? search = default(string?), string? sort = default(string?), int operationIndex = 0)
        {
            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "PlaylistsApi.GetPlaylists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PlaylistList>("/playlists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlaylists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List playlists Return the list of playlist.  Return an empty list it there is no playlist to return.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="search">Keywords search in all indexed fields (optional)</param>
        /// <param name="sort">Sorting results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaylistList</returns>
        public async System.Threading.Tasks.Task<PlaylistList> GetPlaylistsAsync(int? limit = default(int?), int? offset = default(int?), string? search = default(string?), string? sort = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Api42Vb.Client.ApiResponse<PlaylistList> localVarResponse = await GetPlaylistsWithHttpInfoAsync(limit, offset, search, sort, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List playlists Return the list of playlist.  Return an empty list it there is no playlist to return.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of elements to return (default&#x3D;10) (optional)</param>
        /// <param name="offset">offset for pagination (optional)</param>
        /// <param name="search">Keywords search in all indexed fields (optional)</param>
        /// <param name="sort">Sorting results (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaylistList)</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<PlaylistList>> GetPlaylistsWithHttpInfoAsync(int? limit = default(int?), int? offset = default(int?), string? search = default(string?), string? sort = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Api42Vb.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "PlaylistsApi.GetPlaylists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PlaylistList>("/playlists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlaylists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing playlist Update a existing playlist.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Id of the playlist</param>
        /// <param name="playlistProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Playlist</returns>
        public Playlist UpdatePlaylistById(string playlistId, PlaylistProperties playlistProperties, int operationIndex = 0)
        {
            Api42Vb.Client.ApiResponse<Playlist> localVarResponse = UpdatePlaylistByIdWithHttpInfo(playlistId, playlistProperties);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing playlist Update a existing playlist.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Id of the playlist</param>
        /// <param name="playlistProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Playlist</returns>
        public Api42Vb.Client.ApiResponse<Playlist> UpdatePlaylistByIdWithHttpInfo(string playlistId, PlaylistProperties playlistProperties, int operationIndex = 0)
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->UpdatePlaylistById");
            }

            // verify the required parameter 'playlistProperties' is set
            if (playlistProperties == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'playlistProperties' when calling PlaylistsApi->UpdatePlaylistById");
            }

            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playlistId", Api42Vb.Client.ClientUtils.ParameterToString(playlistId)); // path parameter
            localVarRequestOptions.Data = playlistProperties;

            localVarRequestOptions.Operation = "PlaylistsApi.UpdatePlaylistById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Playlist>("/playlists/{playlistId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePlaylistById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing playlist Update a existing playlist.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Id of the playlist</param>
        /// <param name="playlistProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Playlist</returns>
        public async System.Threading.Tasks.Task<Playlist> UpdatePlaylistByIdAsync(string playlistId, PlaylistProperties playlistProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Api42Vb.Client.ApiResponse<Playlist> localVarResponse = await UpdatePlaylistByIdWithHttpInfoAsync(playlistId, playlistProperties, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing playlist Update a existing playlist.
        /// </summary>
        /// <exception cref="Api42Vb.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playlistId">Id of the playlist</param>
        /// <param name="playlistProperties"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Playlist)</returns>
        public async System.Threading.Tasks.Task<Api42Vb.Client.ApiResponse<Playlist>> UpdatePlaylistByIdWithHttpInfoAsync(string playlistId, PlaylistProperties playlistProperties, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'playlistId' is set
            if (playlistId == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'playlistId' when calling PlaylistsApi->UpdatePlaylistById");
            }

            // verify the required parameter 'playlistProperties' is set
            if (playlistProperties == null)
            {
                throw new Api42Vb.Client.ApiException(400, "Missing required parameter 'playlistProperties' when calling PlaylistsApi->UpdatePlaylistById");
            }


            Api42Vb.Client.RequestOptions localVarRequestOptions = new Api42Vb.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Api42Vb.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Api42Vb.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("playlistId", Api42Vb.Client.ClientUtils.ParameterToString(playlistId)); // path parameter
            localVarRequestOptions.Data = playlistProperties;

            localVarRequestOptions.Operation = "PlaylistsApi.UpdatePlaylistById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Playlist>("/playlists/{playlistId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePlaylistById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
