/*
 * 42videobricks
 *
 * 42videobricks is a Video Platform As A Service (VPaaS)
 *
 * The version of the OpenAPI document: 1.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Api42Vb.Client.OpenAPIDateConverter;

namespace Api42Vb.Model
{
    /// <summary>
    /// Video Status Object
    /// </summary>
    [DataContract(Name = "VideoStatus")]
    public partial class VideoStatus : IEquatable<VideoStatus>, IValidatableObject
    {
        /// <summary>
        /// Status of the video
        /// </summary>
        /// <value>Status of the video</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum AVAILABLE for value: AVAILABLE
            /// </summary>
            [EnumMember(Value = "AVAILABLE")]
            AVAILABLE = 1,

            /// <summary>
            /// Enum CREATED for value: CREATED
            /// </summary>
            [EnumMember(Value = "CREATED")]
            CREATED = 2,

            /// <summary>
            /// Enum REQUESTED for value: REQUESTED
            /// </summary>
            [EnumMember(Value = "REQUESTED")]
            REQUESTED = 3,

            /// <summary>
            /// Enum TRANSCODING for value: TRANSCODING
            /// </summary>
            [EnumMember(Value = "TRANSCODING")]
            TRANSCODING = 4,

            /// <summary>
            /// Enum TRANSCODINGERROR for value: TRANSCODING_ERROR
            /// </summary>
            [EnumMember(Value = "TRANSCODING_ERROR")]
            TRANSCODINGERROR = 5
        }


        /// <summary>
        /// Status of the video
        /// </summary>
        /// <value>Status of the video</value>
        /// <example>REQUESTED</example>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VideoStatus" /> class.
        /// </summary>
        /// <param name="status">Status of the video.</param>
        /// <param name="message">Offer comprehensive elucidation and intricate details to expound upon the occurrence of an encoding error within the video, expounding upon the intricacies and nuances involved in such an exceptional event.</param>
        public VideoStatus(StatusEnum? status = default(StatusEnum?), string message = default(string))
        {
            this.Status = status;
            this.Message = message;
        }

        /// <summary>
        /// Offer comprehensive elucidation and intricate details to expound upon the occurrence of an encoding error within the video, expounding upon the intricacies and nuances involved in such an exceptional event
        /// </summary>
        /// <value>Offer comprehensive elucidation and intricate details to expound upon the occurrence of an encoding error within the video, expounding upon the intricacies and nuances involved in such an exceptional event</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VideoStatus {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VideoStatus);
        }

        /// <summary>
        /// Returns true if VideoStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of VideoStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VideoStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Message (string) maxLength
            if (this.Message != null && this.Message.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Message, length must be less than 256.", new [] { "Message" });
            }

            yield break;
        }
    }

}
