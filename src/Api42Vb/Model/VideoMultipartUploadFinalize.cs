/*
 * 42videobricks
 *
 * 42videobricks is a Video Platform As A Service (VPaaS)
 *
 * The version of the OpenAPI document: 1.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Api42Vb.Client.OpenAPIDateConverter;

namespace Api42Vb.Model
{
    /// <summary>
    /// Video Multipart upload finalization
    /// </summary>
    [DataContract(Name = "VideoMultipartUploadFinalize")]
    public partial class VideoMultipartUploadFinalize : IEquatable<VideoMultipartUploadFinalize>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VideoMultipartUploadFinalize" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VideoMultipartUploadFinalize() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VideoMultipartUploadFinalize" /> class.
        /// </summary>
        /// <param name="fileId">file id (required).</param>
        /// <param name="fileKey">file key (required).</param>
        /// <param name="parts">parts (required).</param>
        public VideoMultipartUploadFinalize(string fileId = default(string), string fileKey = default(string), List<VideoMultipartUploadFinalizePartsInner> parts = default(List<VideoMultipartUploadFinalizePartsInner>))
        {
            // to ensure "fileId" is required (not null)
            if (fileId == null)
            {
                throw new ArgumentNullException("fileId is a required property for VideoMultipartUploadFinalize and cannot be null");
            }
            this.FileId = fileId;
            // to ensure "fileKey" is required (not null)
            if (fileKey == null)
            {
                throw new ArgumentNullException("fileKey is a required property for VideoMultipartUploadFinalize and cannot be null");
            }
            this.FileKey = fileKey;
            // to ensure "parts" is required (not null)
            if (parts == null)
            {
                throw new ArgumentNullException("parts is a required property for VideoMultipartUploadFinalize and cannot be null");
            }
            this.Parts = parts;
        }

        /// <summary>
        /// file id
        /// </summary>
        /// <value>file id</value>
        /// <example>5Fu8SetDoWjk3wwReTuWzLat6KubZECxfek863H9nsYreaEaKUmQ4G5iyEAETMK9X_DYJ8QBsgnEoM5bM8B.HQBe9eBtpSxLuXM.THMzKy1JBd0b5XGZ7OT6z.RfZAafc4B4PJ.KyQFarsAY4X7j_Eq2bz6ydqfQHdPyE73vl0Q-</example>
        [DataMember(Name = "fileId", IsRequired = true, EmitDefaultValue = true)]
        public string FileId { get; set; }

        /// <summary>
        /// file key
        /// </summary>
        /// <value>file key</value>
        /// <example>ABkWl5kVPykAMSyu/myvideo.mov</example>
        [DataMember(Name = "fileKey", IsRequired = true, EmitDefaultValue = true)]
        public string FileKey { get; set; }

        /// <summary>
        /// Gets or Sets Parts
        /// </summary>
        [DataMember(Name = "parts", IsRequired = true, EmitDefaultValue = true)]
        public List<VideoMultipartUploadFinalizePartsInner> Parts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VideoMultipartUploadFinalize {\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  FileKey: ").Append(FileKey).Append("\n");
            sb.Append("  Parts: ").Append(Parts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VideoMultipartUploadFinalize);
        }

        /// <summary>
        /// Returns true if VideoMultipartUploadFinalize instances are equal
        /// </summary>
        /// <param name="input">Instance of VideoMultipartUploadFinalize to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VideoMultipartUploadFinalize input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FileId == input.FileId ||
                    (this.FileId != null &&
                    this.FileId.Equals(input.FileId))
                ) && 
                (
                    this.FileKey == input.FileKey ||
                    (this.FileKey != null &&
                    this.FileKey.Equals(input.FileKey))
                ) && 
                (
                    this.Parts == input.Parts ||
                    this.Parts != null &&
                    input.Parts != null &&
                    this.Parts.SequenceEqual(input.Parts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FileId != null)
                {
                    hashCode = (hashCode * 59) + this.FileId.GetHashCode();
                }
                if (this.FileKey != null)
                {
                    hashCode = (hashCode * 59) + this.FileKey.GetHashCode();
                }
                if (this.Parts != null)
                {
                    hashCode = (hashCode * 59) + this.Parts.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
