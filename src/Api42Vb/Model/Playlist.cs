/*
 * 42videobricks
 *
 * 42videobricks is a Video Platform As A Service (VPaaS)
 *
 * The version of the OpenAPI document: 1.2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Api42Vb.Client.OpenAPIDateConverter;

namespace Api42Vb.Model
{
    /// <summary>
    /// Playlist Object
    /// </summary>
    [DataContract(Name = "Playlist")]
    public partial class Playlist : IEquatable<Playlist>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Playlist" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Playlist() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Playlist" /> class.
        /// </summary>
        /// <param name="id">id of the playlist (null when adding a new video) (required).</param>
        /// <param name="name">name of the playlist.</param>
        /// <param name="description">description of the playlist.</param>
        /// <param name="children">ordered list of video in the playlist.</param>
        /// <param name="ctime">Creation date (timestamp).</param>
        /// <param name="mtime">Modification date (timestamp).</param>
        public Playlist(string id = default(string), string name = default(string), string description = default(string), List<Video> children = default(List<Video>), int ctime = default(int), int mtime = default(int))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Playlist and cannot be null");
            }
            this.Id = id;
            this.Name = name;
            this.Description = description;
            this.Children = children;
            this.Ctime = ctime;
            this.Mtime = mtime;
        }

        /// <summary>
        /// id of the playlist (null when adding a new video)
        /// </summary>
        /// <value>id of the playlist (null when adding a new video)</value>
        /// <example>STNQM2FIN1Bpa3I3bC9IRw&#x3D;&#x3D;</example>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// name of the playlist
        /// </summary>
        /// <value>name of the playlist</value>
        /// <example>My playlist name</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// description of the playlist
        /// </summary>
        /// <value>description of the playlist</value>
        /// <example>My video description</example>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// ordered list of video in the playlist
        /// </summary>
        /// <value>ordered list of video in the playlist</value>
        [DataMember(Name = "children", EmitDefaultValue = false)]
        public List<Video> Children { get; set; }

        /// <summary>
        /// Creation date (timestamp)
        /// </summary>
        /// <value>Creation date (timestamp)</value>
        /// <example>1677020400</example>
        [DataMember(Name = "ctime", EmitDefaultValue = false)]
        public int Ctime { get; set; }

        /// <summary>
        /// Modification date (timestamp)
        /// </summary>
        /// <value>Modification date (timestamp)</value>
        /// <example>1679526000</example>
        [DataMember(Name = "mtime", EmitDefaultValue = false)]
        public int Mtime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Playlist {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  Ctime: ").Append(Ctime).Append("\n");
            sb.Append("  Mtime: ").Append(Mtime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Playlist);
        }

        /// <summary>
        /// Returns true if Playlist instances are equal
        /// </summary>
        /// <param name="input">Instance of Playlist to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Playlist input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    input.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                ) && 
                (
                    this.Ctime == input.Ctime ||
                    this.Ctime.Equals(input.Ctime)
                ) && 
                (
                    this.Mtime == input.Mtime ||
                    this.Mtime.Equals(input.Mtime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Children != null)
                {
                    hashCode = (hashCode * 59) + this.Children.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Ctime.GetHashCode();
                hashCode = (hashCode * 59) + this.Mtime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 256.", new [] { "Name" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 2048)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 2048.", new [] { "Description" });
            }

            yield break;
        }
    }

}
